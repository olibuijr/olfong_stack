const fs = require('fs');
const path = require('path');

function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0,
      v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const seedFile = path.join(__dirname, '../prisma/database-export.json');
const seedData = JSON.parse(fs.readFileSync(seedFile, 'utf8'));

const translations = [
  {
    key: 'adminSettings.paymentGatewayEnabled',
    en: 'Payment gateway enabled',
    is: 'GreiÃ°slugatiÃ° virkjaÃ°'
  },
  {
    key: 'adminSettings.paymentGatewayDisabled',
    en: 'Payment gateway disabled',
    is: 'GreiÃ°slugatiÃ° Ã³virkjaÃ°'
  },
  {
    key: 'adminSettings.errorLoadingPaymentGateways',
    en: 'Error loading payment gateways',
    is: 'Villa viÃ° aÃ° hlaÃ°a greiÃ°slugÃ¶tum'
  },
  {
    key: 'adminSettings.errorTogglingPaymentGateway',
    en: 'Error toggling payment gateway',
    is: 'Villa viÃ° aÃ° breyta stÃ¶Ã°u greiÃ°slugats'
  },
  {
    key: 'adminSettings.paymentGatewayTestFailed',
    en: 'Payment gateway test failed: {{message}}',
    is: 'PrÃ³fun greiÃ°slugats mistÃ³kst: {{message}}'
  },
  {
    key: 'adminSettings.errorTestingPaymentGateway',
    en: 'Error testing payment gateway',
    is: 'Villa viÃ° prÃ³fun greiÃ°slugats'
  },
  {
    key: 'adminSettings.errorSavingPaymentGateway',
    en: 'Error saving payment gateway',
    is: 'Villa viÃ° aÃ° vista greiÃ°slugat'
  },
  {
    key: 'adminSettings.pleaseSelectProvider',
    en: 'Please select a provider',
    is: 'Vinsamlegast veldu veitanda'
  },
  {
    key: 'adminSettings.connectionTestSuccessful',
    en: 'Connection test successful',
    is: 'TengingarprÃ³fun tÃ³kst'
  },
  {
    key: 'adminSettings.connectionTestFailed',
    en: 'Connection test failed',
    is: 'TengingarprÃ³fun mistÃ³kst'
  },
  {
    key: 'adminSettings.errorUpdatingPaymentGateway',
    en: 'Error updating payment gateway',
    is: 'Villa viÃ° uppfÃ¦rslu greiÃ°slugats'
  }
];

let addedCount = 0;

for (const translation of translations) {
  // Check if both translations exist
  const hasEnglish = seedData.langs.some(l => l.key === translation.key && l.locale === 'en');
  const hasIcelandic = seedData.langs.some(l => l.key === translation.key && l.locale === 'is');

  if (!hasEnglish) {
    seedData.langs.push({
      id: generateUUID(),
      key: translation.key,
      locale: 'en',
      value: translation.en
    });
    console.log(`âœ“ Added English: ${translation.key} â†’ "${translation.en}"`);
    addedCount++;
  }

  if (!hasIcelandic) {
    seedData.langs.push({
      id: generateUUID(),
      key: translation.key,
      locale: 'is',
      value: translation.is
    });
    console.log(`âœ“ Added Icelandic: ${translation.key} â†’ "${translation.is}"`);
    addedCount++;
  }
}

// Save updated seed file
fs.writeFileSync(seedFile, JSON.stringify(seedData, null, 2));

console.log(`\nâœ… Seed file updated with payment gateway toast translations`);
console.log(`ðŸ“Š Added ${addedCount} translation entries`);
console.log(`ðŸ“Š Total translations: ${seedData.langs.length}`);
