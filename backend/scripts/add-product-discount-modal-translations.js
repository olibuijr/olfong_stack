const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

const productModalTranslations = [
  // Product Modal - Discounts Tab
  { key: 'productModal.discounts.tabLabel', is: 'Afsl√¶ttir', en: 'Discounts' },
  { key: 'productModal.discounts.enableDiscount', is: 'Virkja afsl√°tt fyrir √æessa v√∂ru', en: 'Enable Discount for this Product' },
  { key: 'productModal.discounts.originalPrice', is: 'Upprunalegt ver√∞ (kr) *', en: 'Original Price (kr) *' },
  { key: 'productModal.discounts.discountPercentage', is: 'Afsl√°ttur (%) *', en: 'Discount Percentage (%) *' },
  { key: 'productModal.discounts.startDate', is: 'Upphafsdagur afsl√°ttar', en: 'Discount Start Date' },
  { key: 'productModal.discounts.endDate', is: 'Lokadagur afsl√°ttar', en: 'Discount End Date' },
  { key: 'productModal.discounts.reasonEn', is: '√Åst√¶√∞a afsl√°ttar (EN)', en: 'Discount Reason (EN)' },
  { key: 'productModal.discounts.reasonIs', is: '√Åst√¶√∞a afsl√°ttar (IS)', en: 'Discount Reason (IS)' },
  { key: 'productModal.discounts.reasonPlaceholder', is: 'T.d., T√≠mabundin √∫tsala, R√Ωmingarsala', en: 'e.g., Seasonal Sale, Clearance' },
  { key: 'productModal.discounts.reasonIsPlaceholder', is: 'T.d., T√≠mabundin √∫tsala, R√Ωmingarsala', en: 'e.g., Seasonal Sale, Clearance' },
  { key: 'productModal.discounts.emptyStateMessage', is: 'Virkja√∞u afsl√°tt til a√∞ stilla afsl√°ttar fyrir √æessa v√∂ru', en: 'Enable discount to configure discount settings for this product' },
];

async function main() {
  console.log('üå± Adding product modal discount translations...\n');

  let added = 0;
  let skipped = 0;

  for (const translation of productModalTranslations) {
    try {
      // Upsert Icelandic translation
      await prisma.lang.upsert({
        where: {
          key_locale: {
            key: translation.key,
            locale: 'is'
          }
        },
        update: {
          value: translation.is
        },
        create: {
          key: translation.key,
          locale: 'is',
          value: translation.is
        }
      });

      // Upsert English translation
      await prisma.lang.upsert({
        where: {
          key_locale: {
            key: translation.key,
            locale: 'en'
          }
        },
        update: {
          value: translation.en
        },
        create: {
          key: translation.key,
          locale: 'en',
          value: translation.en
        }
      });

      console.log(`‚úÖ ${translation.key}`);
      added += 2;
    } catch (error) {
      console.error(`‚ùå Error adding translation ${translation.key}:`, error.message);
      skipped += 2;
    }
  }

  console.log(`\n‚ú® Translation seeding complete!`);
  console.log(`üìä Summary:`);
  console.log(`   ‚úÖ Added/Updated: ${added}`);
  console.log(`   ‚ö†Ô∏è  Skipped/Errors: ${skipped}`);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log('\nüéâ All done!');
    process.exit(0);
  })
  .catch((e) => {
    console.error('\n‚ùå Fatal error:', e);
    process.exit(1);
  });
